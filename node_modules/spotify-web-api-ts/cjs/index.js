"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const qs_1 = __importDefault(require("qs"));
const AlbumsApi_1 = require("./apis/AlbumsApi");
const ArtistsApi_1 = require("./apis/ArtistsApi");
const BrowseApi_1 = require("./apis/BrowseApi");
const EpisodesApi_1 = require("./apis/EpisodesApi");
const FollowApi_1 = require("./apis/FollowApi");
const LibraryApi_1 = require("./apis/LibraryApi");
const PersonalizationApi_1 = require("./apis/PersonalizationApi");
const PlayerApi_1 = require("./apis/PlayerApi");
const PlaylistsApi_1 = require("./apis/PlaylistsApi");
const SearchApi_1 = require("./apis/SearchApi");
const ShowsApi_1 = require("./apis/ShowsApi");
const TracksApi_1 = require("./apis/TracksApi");
const UsersApi_1 = require("./apis/UsersApi");
const constants_1 = require("./constants");
const encodeToBase64_1 = require("./helpers/encodeToBase64");
const getAuthorizationUrl_1 = require("./helpers/getAuthorizationUrl");
const Http_1 = require("./helpers/Http");
class SpotifyWebApi {
    constructor(options) {
        var _a, _b, _c, _d;
        this.clientId = (_a = options === null || options === void 0 ? void 0 : options.clientId) !== null && _a !== void 0 ? _a : '';
        this.clientSecret = (_b = options === null || options === void 0 ? void 0 : options.clientSecret) !== null && _b !== void 0 ? _b : '';
        this.redirectUri = (_c = options === null || options === void 0 ? void 0 : options.redirectUri) !== null && _c !== void 0 ? _c : '';
        this.http = new Http_1.Http((_d = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _d !== void 0 ? _d : '');
        this.albums = new AlbumsApi_1.AlbumsApi(this.http);
        this.artists = new ArtistsApi_1.ArtistsApi(this.http);
        this.browse = new BrowseApi_1.BrowseApi(this.http);
        this.episodes = new EpisodesApi_1.EpisodesApi(this.http);
        this.follow = new FollowApi_1.FollowApi(this.http);
        this.library = new LibraryApi_1.LibraryApi(this.http);
        this.personalization = new PersonalizationApi_1.PersonalizationApi(this.http);
        this.player = new PlayerApi_1.PlayerApi(this.http);
        this.playlists = new PlaylistsApi_1.PlaylistsApi(this.http);
        this.search = new SearchApi_1.SearchApi(this.http);
        this.shows = new ShowsApi_1.ShowsApi(this.http);
        this.tracks = new TracksApi_1.TracksApi(this.http);
        this.users = new UsersApi_1.UsersApi(this.http);
    }
    getAccessToken() {
        return this.http.getAccessToken();
    }
    setAccessToken(accessToken) {
        this.http.setAccessToken(accessToken);
    }
    getClientId() {
        return this.clientId;
    }
    getClientSecret() {
        return this.clientSecret;
    }
    getRedirectUri() {
        return this.redirectUri;
    }
    getRefreshableAuthorizationUrl(options) {
        return getAuthorizationUrl_1.getAuthorizationUrl(this.clientId, this.redirectUri, 'code', options);
    }
    getTemporaryAuthorizationUrl(options) {
        return getAuthorizationUrl_1.getAuthorizationUrl(this.clientId, this.redirectUri, 'token', options);
    }
    getRefreshableUserTokens(code) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield axios_1.default.post(constants_1.TOKEN_URL, qs_1.default.stringify({
                code,
                grant_type: 'authorization_code',
                redirect_uri: this.redirectUri,
            }), {
                headers: {
                    Authorization: `Basic ${encodeToBase64_1.encodeToBase64(`${this.clientId}:${this.clientSecret}`)}`,
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
            });
            return response.data;
        });
    }
    getRefreshedAccessToken(refreshToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield axios_1.default.post(constants_1.TOKEN_URL, qs_1.default.stringify({
                grant_type: 'refresh_token',
                refresh_token: refreshToken,
            }), {
                headers: {
                    Authorization: `Basic ${encodeToBase64_1.encodeToBase64(`${this.clientId}:${this.clientSecret}`)}`,
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
            });
            return response.data;
        });
    }
    getTemporaryAppTokens() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield axios_1.default.post(constants_1.TOKEN_URL, qs_1.default.stringify({
                grant_type: 'client_credentials',
            }), {
                headers: {
                    Authorization: `Basic ${encodeToBase64_1.encodeToBase64(`${this.clientId}:${this.clientSecret}`)}`,
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
            });
            return response.data;
        });
    }
}
exports.SpotifyWebApi = SpotifyWebApi;
//# sourceMappingURL=index.js.map