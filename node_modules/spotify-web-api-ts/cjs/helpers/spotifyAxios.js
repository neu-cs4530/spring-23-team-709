"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const qs_1 = __importDefault(require("qs"));
const constants_1 = require("../constants");
function spotifyAxios(url, method, accessToken, config) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const _a = config !== null && config !== void 0 ? config : {}, { contentType } = _a, axiosConfig = __rest(_a, ["contentType"]);
            const response = yield axios_1.default(Object.assign(Object.assign({}, axiosConfig), { baseURL: constants_1.BASE_API_URL, headers: {
                    Authorization: `Bearer ${accessToken}`,
                    'Content-Type': contentType !== null && contentType !== void 0 ? contentType : 'application/json',
                }, paramsSerializer,
                url,
                method }));
            return response.data;
        }
        catch (error) {
            const err = error;
            throw new Error(err.message);
        }
    });
}
exports.spotifyAxios = spotifyAxios;
function paramsSerializer(params) {
    return qs_1.default.stringify(params, { arrayFormat: 'comma' });
}
exports.paramsSerializer = paramsSerializer;
//# sourceMappingURL=spotifyAxios.js.map