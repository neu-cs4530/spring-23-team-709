"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
class PlayerApi {
    constructor(http) {
        this.http = http;
    }
    addToQueue(uri, options) {
        return this.http.post('/me/player/queue', {
            params: Object.assign(Object.assign({}, options), { uri }),
        });
    }
    getCurrentlyPlayingTrack(options) {
        return this.http.get('/me/player/currently-playing', options && { params: options });
    }
    getMyDevices() {
        return this.http.get('/me/player/devices');
    }
    getPlaybackInfo(options) {
        return this.http.get('/me/player', options && { params: options });
    }
    getRecentlyPlayedTracks(options) {
        return this.http.get('/me/player/recently-played', options && { params: options });
    }
    pause(options) {
        return this.http.put('/me/player/pause', options && { params: options });
    }
    play(options) {
        const _a = options !== null && options !== void 0 ? options : {}, { device_id } = _a, bodyParams = __rest(_a, ["device_id"]);
        return this.http.put('/me/player/play', options && Object.assign(Object.assign({}, (device_id && { params: { device_id } })), (Object.keys(bodyParams).length && { data: bodyParams })));
    }
    seek(positionMs, options) {
        return this.http.put('/me/player/seek', {
            params: Object.assign(Object.assign({}, options), { position_ms: positionMs }),
        });
    }
    setRepeat(state, options) {
        return this.http.put('/me/player/repeat', {
            params: Object.assign(Object.assign({}, options), { state }),
        });
    }
    setShuffle(state, options) {
        return this.http.put('/me/player/shuffle', {
            params: Object.assign(Object.assign({}, options), { state }),
        });
    }
    setVolume(volumePercent, options) {
        return this.http.put('/me/player/volume', {
            params: Object.assign(Object.assign({}, options), { volume_percent: volumePercent }),
        });
    }
    skipToNext(options) {
        return this.http.post('/me/player/next', options && { params: options });
    }
    skipToPrevious(options) {
        return this.http.post('/me/player/previous', options && { params: options });
    }
    transferPlayback(deviceId, options) {
        return this.http.put('/me/player', {
            data: Object.assign(Object.assign({}, options), { device_ids: [deviceId] }),
        });
    }
}
exports.PlayerApi = PlayerApi;
//# sourceMappingURL=PlayerApi.js.map