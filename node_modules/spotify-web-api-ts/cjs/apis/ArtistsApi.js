"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class ArtistsApi {
    constructor(http) {
        this.http = http;
    }
    getArtist(artistId) {
        return this.http.get(`/artists/${artistId}`);
    }
    getArtistAlbums(artistId, options) {
        return this.http.get(`/artists/${artistId}/albums`, options && { params: options });
    }
    getArtists(artistIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.get('/artists', {
                params: {
                    ids: artistIds,
                },
            });
            return response.artists;
        });
    }
    getArtistTopTracks(artistId, country) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.get(`/artists/${artistId}/top-tracks`, {
                params: {
                    country,
                },
            });
            return response.tracks;
        });
    }
    getRelatedArtists(artistId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.get(`/artists/${artistId}/related-artists`);
            return response.artists;
        });
    }
}
exports.ArtistsApi = ArtistsApi;
//# sourceMappingURL=ArtistsApi.js.map