"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class BrowseApi {
    constructor(http) {
        this.http = http;
    }
    getAvailableGenreSeeds() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.get('/recommendations/available-genre-seeds');
            return response.genres;
        });
    }
    getCategories(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.get('/browse/categories', options && { params: options });
            return response.categories;
        });
    }
    getCategory(categoryId, options) {
        return this.http.get(`/browse/categories/${categoryId}`, options && { params: options });
    }
    getCategoryPlaylists(categoryId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.get(`/browse/categories/${categoryId}/playlists`, options && { params: options });
            return response.playlists;
        });
    }
    getFeaturedPlaylists(options) {
        return this.http.get('/browse/featured-playlists', options && { params: options });
    }
    getNewReleases(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.get('/browse/new-releases', options && { params: options });
            return response.albums;
        });
    }
    getRecommendations(seeds, options) {
        return this.http.get('/recommendations', {
            params: Object.assign(Object.assign({}, seeds), options),
        });
    }
}
exports.BrowseApi = BrowseApi;
//# sourceMappingURL=BrowseApi.js.map