"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class LibraryApi {
    constructor(http) {
        this.http = http;
    }
    areAlbumsSaved(albumIds) {
        return this.http.get('/me/albums/contains', {
            params: {
                ids: albumIds,
            },
        });
    }
    areShowsSaved(showIds) {
        return this.http.get('/me/shows/contains', {
            params: {
                ids: showIds,
            },
        });
    }
    areTracksSaved(trackIds) {
        return this.http.get('/me/tracks/contains', {
            params: {
                ids: trackIds,
            },
        });
    }
    getSavedAlbums(options) {
        return this.http.get('/me/albums', options && { params: options });
    }
    getSavedShows(options) {
        return this.http.get('/me/shows', options && { params: options });
    }
    getSavedTracks(options) {
        return this.http.get('/me/tracks', options && { params: options });
    }
    isAlbumSaved(albumId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.areAlbumsSaved([albumId]);
            return response[0];
        });
    }
    isShowSaved(showId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.areShowsSaved([showId]);
            return response[0];
        });
    }
    isTrackSaved(trackId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.areTracksSaved([trackId]);
            return response[0];
        });
    }
    removeSavedAlbum(albumId) {
        return this.removeSavedAlbums([albumId]);
    }
    removeSavedAlbums(albumIds) {
        return this.http.delete('/me/albums', {
            data: {
                ids: albumIds,
            },
        });
    }
    removeSavedShow(showId, options) {
        return this.removeSavedShows([showId], options);
    }
    removeSavedShows(showIds, options) {
        return this.http.delete('/me/shows', {
            params: Object.assign(Object.assign({}, options), { ids: showIds }),
        });
    }
    removeSavedTrack(trackId) {
        return this.removeSavedTracks([trackId]);
    }
    removeSavedTracks(trackIds) {
        return this.http.delete('/me/tracks', {
            data: {
                ids: trackIds,
            },
        });
    }
    saveAlbum(albumId) {
        return this.saveAlbums([albumId]);
    }
    saveAlbums(albumIds) {
        return this.http.put('/me/albums', {
            data: {
                ids: albumIds,
            },
        });
    }
    saveShow(showId) {
        return this.saveShows([showId]);
    }
    saveShows(showIds) {
        return this.http.put('/me/shows', {
            params: {
                ids: showIds,
            },
        });
    }
    saveTrack(trackId) {
        return this.saveTracks([trackId]);
    }
    saveTracks(trackIds) {
        return this.http.put('/me/tracks', {
            data: {
                ids: trackIds,
            },
        });
    }
}
exports.LibraryApi = LibraryApi;
//# sourceMappingURL=LibraryApi.js.map