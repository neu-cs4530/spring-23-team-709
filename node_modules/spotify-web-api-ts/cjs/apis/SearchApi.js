"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const searchHelper_1 = require("../helpers/searchHelper");
class SearchApi {
    constructor(http) {
        this.http = http;
    }
    search(query, type, options) {
        return searchHelper_1.searchHelper(this.http, query, type, options);
    }
    searchAlbums(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield searchHelper_1.searchHelper(this.http, query, ['album'], options);
            return response.albums;
        });
    }
    searchArtists(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield searchHelper_1.searchHelper(this.http, query, ['artist'], options);
            return response.artists;
        });
    }
    searchEpisodes(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield searchHelper_1.searchHelper(this.http, query, ['episode'], options);
            return response.episodes;
        });
    }
    searchPlaylists(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield searchHelper_1.searchHelper(this.http, query, ['playlist'], options);
            return response.playlists;
        });
    }
    searchShows(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield searchHelper_1.searchHelper(this.http, query, ['show'], options);
            return response.shows;
        });
    }
    searchTracks(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield searchHelper_1.searchHelper(this.http, query, ['track'], options);
            return response.tracks;
        });
    }
}
exports.SearchApi = SearchApi;
//# sourceMappingURL=SearchApi.js.map