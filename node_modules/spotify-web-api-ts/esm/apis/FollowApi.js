var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class FollowApi {
    constructor(http) {
        this.http = http;
    }
    areFollowingPlaylist(playlistId, userIds) {
        return this.http.get(`/playlists/${playlistId}/followers/contains`, {
            params: {
                ids: userIds,
            },
        });
    }
    followArtist(artistId) {
        return this.followArtists([artistId]);
    }
    followArtists(artistIds) {
        return this.http.put('/me/following', {
            params: {
                type: 'artist',
            },
            data: {
                ids: artistIds,
            },
        });
    }
    followPlaylist(playlistId, options) {
        return this.http.put(`/playlists/${playlistId}/followers`, options && { data: options });
    }
    followUser(userId) {
        return this.followUsers([userId]);
    }
    followUsers(userIds) {
        return this.http.put('/me/following', {
            params: {
                type: 'user',
            },
            data: {
                ids: userIds,
            },
        });
    }
    getFollowedArtists(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.get('/me/following', {
                params: Object.assign(Object.assign({}, options), { type: 'artist' }),
            });
            return response.artists;
        });
    }
    isFollowingArtist(artistId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.isFollowingArtists([artistId]);
            return response[0];
        });
    }
    isFollowingArtists(artistIds) {
        return this.http.get('/me/following/contains', {
            params: {
                ids: artistIds,
                type: 'artist',
            },
        });
    }
    isFollowingPlaylist(playlistId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.areFollowingPlaylist(playlistId, [userId]);
            return response[0];
        });
    }
    isFollowingUser(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.isFollowingUsers([userId]);
            return response[0];
        });
    }
    isFollowingUsers(userIds) {
        return this.http.get('/me/following/contains', {
            params: {
                ids: userIds,
                type: 'user',
            },
        });
    }
    unfollowArtist(artistId) {
        return this.unfollowArtists([artistId]);
    }
    unfollowArtists(artistIds) {
        return this.http.delete('/me/following', {
            params: {
                type: 'artist',
            },
            data: {
                ids: artistIds,
            },
        });
    }
    unfollowPlaylist(playlistId) {
        return this.http.delete(`/playlists/${playlistId}/followers`);
    }
    unfollowUser(userId) {
        return this.unfollowUsers([userId]);
    }
    unfollowUsers(userIds) {
        return this.http.delete('/me/following', {
            params: {
                type: 'user',
            },
            data: {
                ids: userIds,
            },
        });
    }
}
//# sourceMappingURL=FollowApi.js.map