var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class PlaylistsApi {
    constructor(http) {
        this.http = http;
    }
    addItemToPlaylist(playlistId, uri, options) {
        return this.addItemsToPlaylist(playlistId, [uri], options);
    }
    addItemsToPlaylist(playlistId, uris, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.post(`/playlists/${playlistId}/tracks`, {
                data: Object.assign(Object.assign({}, options), { uris }),
            });
            return response.snapshot_id;
        });
    }
    changePlaylistDetails(playlistId, details) {
        return this.http.put(`/playlists/${playlistId}`, details && { data: details });
    }
    createPlaylist(userId, playlistName, options) {
        return this.http.post(`/users/${userId}/playlists`, {
            data: Object.assign(Object.assign({}, options), { name: playlistName }),
        });
    }
    getMyPlaylists(options) {
        return this.http.get('/me/playlists', options && { params: options });
    }
    getPlaylist(playlistId, options) {
        return this.http.get(`/playlists/${playlistId}`, options && { params: options });
    }
    getPlaylistCover(playlistId) {
        return this.http.get(`/playlists/${playlistId}/images`);
    }
    getPlaylistItems(playlistId, options) {
        return this.http.get(`/playlists/${playlistId}/tracks`, options && { params: options });
    }
    getUserPlaylists(userId, options) {
        return this.http.get(`/users/${userId}/playlists`, options && { params: options });
    }
    removePlaylistItem(playlistId, uri) {
        return this.removePlaylistItems(playlistId, [uri]);
    }
    removePlaylistItems(playlistId, uris) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.delete(`/playlists/${playlistId}/tracks`, {
                data: {
                    tracks: uris.map(uri => ({ uri })),
                },
            });
            return response.snapshot_id;
        });
    }
    removePlaylistItemByPosition(playlistId, uri, positions, options) {
        return this.removePlaylistItemsByPosition(playlistId, [{ uri, positions }], options);
    }
    removePlaylistItemsByPosition(playlistId, items, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.delete(`/playlists/${playlistId}/tracks`, {
                data: Object.assign(Object.assign({}, options), { tracks: items }),
            });
            return response.snapshot_id;
        });
    }
    reorderPlaylistItems(playlistId, rangeStart, insertBefore, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.put(`/playlists/${playlistId}/tracks`, {
                data: Object.assign(Object.assign({}, options), { range_start: rangeStart, insert_before: insertBefore }),
            });
            return response.snapshot_id;
        });
    }
    replacePlaylistItems(playlistId, uris) {
        return this.http.put(`/playlists/${playlistId}/tracks`, {
            data: {
                uris: uris,
            },
        });
    }
    uploadPlaylistCover(playlistId, image) {
        return this.http.put(`/playlists/${playlistId}/images`, {
            data: image,
            contentType: 'image/jpeg',
        });
    }
}
//# sourceMappingURL=PlaylistsApi.js.map