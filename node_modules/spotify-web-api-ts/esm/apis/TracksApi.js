var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class TracksApi {
    constructor(http) {
        this.http = http;
    }
    getAudioAnalysisForTrack(trackId) {
        return this.http.get(`/audio-analysis/${trackId}`);
    }
    getAudioFeaturesForTrack(trackId) {
        return this.http.get(`/audio-features/${trackId}`);
    }
    getAudioFeaturesForTracks(trackIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.get('/audio-features', {
                params: {
                    ids: trackIds,
                },
            });
            return response.audio_features;
        });
    }
    getTrack(trackId, options) {
        return this.http.get(`/tracks/${trackId}`, options && { params: options });
    }
    getTracks(trackIds, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.http.get('/tracks', {
                params: Object.assign(Object.assign({}, options), { ids: trackIds }),
            });
            return response.tracks;
        });
    }
}
//# sourceMappingURL=TracksApi.js.map