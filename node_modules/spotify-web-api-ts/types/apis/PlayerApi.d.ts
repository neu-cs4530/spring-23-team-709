import { Http } from '../helpers/Http';
import { CurrentlyPlaying, CurrentlyPlayingContext, Device, RepeatState } from '../types/SpotifyObjects';
import { DeviceIdOptions, GetCurrentlyPlayingTrackOptions, GetPlaybackInfoOptions, GetRecentlyPlayedTracksOptions, PlayOptions, TransferPlaybackOptions } from '../types/SpotifyOptions';
import { GetRecentlyPlayedTracksResponse } from '../types/SpotifyResponses';
export declare class PlayerApi {
    private http;
    constructor(http: Http);
    addToQueue(uri: string, options?: DeviceIdOptions): Promise<void>;
    getCurrentlyPlayingTrack(options?: GetCurrentlyPlayingTrackOptions): Promise<CurrentlyPlaying | string>;
    getMyDevices(): Promise<Device[]>;
    getPlaybackInfo(options?: GetPlaybackInfoOptions): Promise<CurrentlyPlayingContext>;
    getRecentlyPlayedTracks(options?: GetRecentlyPlayedTracksOptions): Promise<GetRecentlyPlayedTracksResponse>;
    pause(options?: DeviceIdOptions): Promise<void>;
    play(options?: PlayOptions): Promise<void>;
    seek(positionMs: number, options?: DeviceIdOptions): Promise<void>;
    setRepeat(state: RepeatState, options?: DeviceIdOptions): Promise<void>;
    setShuffle(state: boolean, options?: DeviceIdOptions): Promise<void>;
    setVolume(volumePercent: number, options?: DeviceIdOptions): Promise<void>;
    skipToNext(options?: DeviceIdOptions): Promise<void>;
    skipToPrevious(options?: DeviceIdOptions): Promise<void>;
    transferPlayback(deviceId: string, options?: TransferPlaybackOptions): Promise<void>;
}
//# sourceMappingURL=PlayerApi.d.ts.map