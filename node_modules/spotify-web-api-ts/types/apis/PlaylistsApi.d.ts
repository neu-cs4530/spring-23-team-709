import { Http } from '../helpers/Http';
import { Playlist, PlaylistDetails, SpotifyImage } from '../types/SpotifyObjects';
import { AddItemsToPlaylistOptions, CreatePlaylistOptions, GetMyPlaylistsOptions, GetPlaylistItemsOptions, GetPlaylistOptions, GetUserPlaylistsOptions, RemovePlaylistItemsByPositionOptions, ReorderPlaylistItemsOptions } from '../types/SpotifyOptions';
import { GetMyPlaylistsResponse, GetPlaylistItemsResponse, GetUserPlaylistsResponse } from '../types/SpotifyResponses';
export declare class PlaylistsApi {
    private http;
    constructor(http: Http);
    addItemToPlaylist(playlistId: string, uri: string, options?: AddItemsToPlaylistOptions): Promise<string>;
    addItemsToPlaylist(playlistId: string, uris: string[], options?: AddItemsToPlaylistOptions): Promise<string>;
    changePlaylistDetails(playlistId: string, details: PlaylistDetails): Promise<void>;
    createPlaylist(userId: string, playlistName: string, options?: CreatePlaylistOptions): Promise<Playlist>;
    getMyPlaylists(options?: GetMyPlaylistsOptions): Promise<GetMyPlaylistsResponse>;
    getPlaylist(playlistId: string, options?: GetPlaylistOptions): Promise<Playlist>;
    getPlaylistCover(playlistId: string): Promise<SpotifyImage[]>;
    getPlaylistItems(playlistId: string, options?: GetPlaylistItemsOptions): Promise<GetPlaylistItemsResponse>;
    getUserPlaylists(userId: string, options?: GetUserPlaylistsOptions): Promise<GetUserPlaylistsResponse>;
    removePlaylistItem(playlistId: string, uri: string): Promise<string>;
    removePlaylistItems(playlistId: string, uris: string[]): Promise<string>;
    removePlaylistItemByPosition(playlistId: string, uri: string, positions: number[], options?: RemovePlaylistItemsByPositionOptions): Promise<string>;
    removePlaylistItemsByPosition(playlistId: string, items: Array<{
        uri: string;
        positions: number[];
    }>, options?: RemovePlaylistItemsByPositionOptions): Promise<string>;
    reorderPlaylistItems(playlistId: string, rangeStart: number, insertBefore: number, options?: ReorderPlaylistItemsOptions): Promise<string>;
    replacePlaylistItems(playlistId: string, uris: string[]): Promise<void>;
    uploadPlaylistCover(playlistId: string, image: string): Promise<void>;
}
//# sourceMappingURL=PlaylistsApi.d.ts.map